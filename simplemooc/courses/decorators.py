from django.shortcuts import get_object_or_404, redirect
from django.contrib import messages

from .models import Course, Enrollment

def enrollment_required(view_func):		# recebe primeiro a função, que vai receber a 'view' que é a função que vai ser executada do Django, a 'view' normal do Django.
	def _wrapper(request, *args, **kwargs):
		slug = kwargs['slug']		# busca um 'slug' nos 'kwargs' da 'url', para usar esse decorator tem que necessariamente ter o 'slug' do curso na 'url'. Porque vou pegar esse 'slug' e buscar o curso...
		course = get_object_or_404(Course, slug=slug)		# pega o curso atual...
		has_permission = request.user.is_staff		# inicialmente verifica se o usuário tem permissão ou não, se ele for 'staff', porque se for, ele tem permissão automaticamente.
		if not has_permission:		# se ele não tiver permissão aqui é porque ele não é 'staff'
			try:
				enrollment = Enrollment.objects.get(	# busca a matrícula dele no curso...
					user=request.user, course=course 	# busca pelo usuário e curso.
				)
			except Enrollment.DoesNotExist:		# se não existir permissão, manda a mensagem...
				message = 'Desculpe, mas você não tem permissão para acessar esta página'
			else:		# se existir...
				if enrollment.is_approved():	# vai ser verificado se o status está com aprovado. Caso estiver...
					has_permission = True 		# ai sim da permissão a ele.
				else:		# se não, mostra uma mensagem que o status ainda está pendente...
					message = 'A sua inscrição no curso ainda está pendente'
		if not has_permission:		# por fim verifica se tem permissão de fato...
			messages.error(request, message)		# se não tiver, mostra uma mensagem de erro, uma das duas acima...
			return redirect('accounts:dashboard')		# e redireciona para o 'dashboard'.
		request.course = course 	# se passar, porque ele tem permissão... Para não fazer uma nova consulta esse curso na 'view', vou jogar o 'objeto' 'curso' no 'request'. Então toda 'view' que usar esse 'decorator', vai ter um 'objeto course' no 'request'. Para que essa consulta não seja repetida na 'view'.
		return view_func(request, *args, **kwargs)		# finalmente executa a 'view' de fato, a 'view' que deve ser executada para aquele determinada 'url', passa no 'request', usa '*args' e o '**kwargs'
	return _wrapper